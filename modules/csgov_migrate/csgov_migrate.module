<?php

/**
 * @file
 * CS Gov Migrate module functions.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\migrate\MigrateExecutable;
use Drupal\views\Views;

/**
 * Get list of entity types and bundles to be exported.
 *
 * @return array[]
 *   The list of bundles, keyed by entity types.
 */
function _csgov_migrate_get_migrations() {
  return [
    'taxonomy' => [
      'board_type',
      'media_tags',
      'news_type',
    ],
    'file' => [NULL],
    'media' => [
      'file',
      'image',
    ],
    'paragraph' => [
      'accordion',
      'accordion_group',
      'attachments',
      'content',
      'item',
      'item_list',
      'node_list',
    ],
    'menu' => [NULL],
    'node' => [
      'page',
      'person',
      'board',
      'event',
      'news',
      'notification',
    ],
  ];
}

/**
 * Prepare batch to import or export of default content.
 *
 * @param string $direction
 *   The migration direction ('import' or 'export').
 *
 * @return array
 *   The batch array.
 */
function _csgov_migrate_get_batch($direction) {
  $function = '_csgov_migrate_' . $direction . '_operation';

  // Get entity types and bundles to be processed.
  $migrations = _csgov_migrate_get_migrations();

  // Prepare a single operation for every bundle.
  $operations = [];
  foreach ($migrations as $entity_type => $bundles) {
    foreach ($bundles as $bundle) {
      $operations[] = [$function, [$entity_type, $bundle]];
    }
  }

  // Append migrations with recursive references to run again.
  if ($direction === 'import') {
    $operations[] = [$function, ['paragraph', 'node_list']];
  }

  return [
    'operations' => $operations,
    'title' => t(ucfirst($direction) . 'ing default content'),
  ];
}

/**
 * Implements callback_batch_operation().
 *
 * Performs batch import of default content.
 *
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 * @param array $context
 *   The batch context.
 */
function _csgov_migrate_import_operation($entity_type, $bundle, &$context) {
  $id = implode('_', array_filter(['csgov_migrate', $entity_type, $bundle]));
  $migration_manager = \Drupal::service('plugin.manager.migration');
  if ($migration_manager->hasDefinition($id)) {
    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration */
    $migration = $migration_manager->createInstance($id);
    $migration->getIdMap()->prepareUpdate();
    $executable = new MigrateExecutable($migration);
    $executable->import();
  }
}

/**
 * Implements callback_batch_operation().
 *
 * Performs batch export of default content.
 *
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 * @param array $context
 *   The batch context.
 */
function _csgov_migrate_export_operation($entity_type, $bundle, &$context) {
  $id = implode('_', array_filter([$entity_type, $bundle]));
  $view_id = 'csgov_migrate_export_' . $entity_type;
  $view = Views::getView($view_id);
  if (!empty($view) && !empty($view->storage->getDisplay('rest_export_1'))) {
    $view->setArguments([$bundle]);
    $result = $view->render('rest_export_1');
    $json = \Drupal::service('renderer')->render($result);
    if (!empty($json)) {
      $directory = dirname(__FILE__) . '/data/';
      $path = $directory . $id . '.json';
      file_put_contents($path, $json);
    }
  }
}

/**
 * Extracts multiple values from comma-separated string.
 */
function csgov_migrate_process_multiple($input) {
  $result = [];
  if (!empty($input)) {
    foreach (explode(',', $input) as $value) {
      if (!empty($value = trim($value))) {
        $result[] = ['value' => $value];
      }
    }
  }
  return $result;
}

/**
 * Converts complex array to entity reference field values.
 */
function csgov_migrate_process_reference($input) {
  if (!empty($input[0]) && is_array($input[0])
    && !empty($input[0][0]) && !empty($input[0][1])
  ) {
    return [
      'target_id' => $input[0][0],
      'target_revision_id' => $input[0][1],
    ];
  }
  return NULL;
}

/**
 * Implements hook_entity_field_access_alter().
 */
function csgov_migrate_entity_field_access_alter(array &$grants, array $context) {
  // Allow to export data using "Layout Builder JSON" formatter.
  if ($context['field_definition']->getName() === 'layout_builder__layout'
    && $context['operation'] === 'view' && $grants[':default']->isForbidden()
  ) {
    $grants[':default'] = AccessResult::allowed()
      ->inheritCacheability($grants[':default']);
  }
}
